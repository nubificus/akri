FROM rust:1.73-slim-bookworm AS planner
RUN rustup component add rustfmt
RUN apt-get update && apt-get install -y clang lld protobuf-compiler pkg-config mmdebstrap wget
RUN cargo install cargo-chef

RUN apt-get install -y  libssl-dev libudev-dev libv4l-dev pkg-config
COPY . /app
WORKDIR /app
ARG EXTRA_CARGO_ARGS
RUN cargo chef prepare --recipe-path recipe.json
#===================================================================================================

FROM  rust:1.73-slim-bookworm AS builder
RUN rustup component add rustfmt
RUN apt-get update && apt-get install -y clang lld protobuf-compiler pkg-config mmdebstrap wget
RUN cargo install cargo-chef
RUN apt-get install -y libssl-dev libudev-dev libv4l-dev pkg-config
WORKDIR /app
COPY --from=planner /app/recipe.json recipe.json
# Build dependencies - this is the caching Docker layer!
RUN cargo chef cook --release --recipe-path recipe.json
COPY .  .
ARG EXTRA_CARGO_ARGS
RUN cargo build ${EXTRA_CARGO_ARGS}
ARG AKRI_COMPONENT
RUN mkdir -p /build/bin
RUN PROFILE=$(echo "${EXTRA_CARGO_ARGS}" | grep -q -- --release && echo "release" || echo "debug"); \
    cp ./target/${PROFILE}/${AKRI_COMPONENT} /build/bin/akri
# Prepare crictl for agent ...TODO: make this multi arch
RUN VERSION=v1.25.0; if [ "${AKRI_COMPONENT}" = "agent" ]; then wget \ 
    "https://github.com/kubernetes-sigs/cri-tools/releases/download/$VERSION/crictl-$VERSION-linux-amd64.tar.gz" -O crictl.tar.gz\ 
    && tar zxvf crictl.tar.gz -C /build/bin; fi
#=====================================================================================================


# FROM ubuntu:22.04 as base
# #COPY --from=builder /installroot /
# WORKDIR /app
# COPY --from=builder /build/bin /app
# ENV RUST_LOG agent,akri_debug_echo,akri_discovery_utils,akri_onvif,akri_opcua,akri_shared,akri_udev\ 
# ,controller,debug_echo_discovery_handler,onvif_discovery_handler,opcua_discovery_handler,udev_discovery_handler
# #ENTRYPOINT [ "/app/akri" ]

FROM rust:1.73-slim-bookworm AS raul
WORKDIR /app
COPY --from=builder /build/bin/ .
ENV RUST_LOG agent,akri_debug_echo,akri_discovery_utils,akri_onvif,akri_opcua,akri_shared,akri_udev\ 
,controller,debug_echo_discovery_handler,onvif_discovery_handler,opcua_discovery_handler,udev_discovery_handler
# sing a fixed value here as we can't use any variable in entrypoint
ENTRYPOINT [ "/app/akri" ]
